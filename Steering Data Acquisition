/* A simple data logger for the Arduino analog pins with optional DS1307
uses RTClib from https://github.com/adafruit/RTClib
Last edited on 2/17/14 -
The only user input required is the toggle switch.  This code is to gather data while driving the cart to relate steering angle to turn radius.
This code saves a CSV file with time (milliseconds), Steering, and 10 samples of analog reads to a removable SD card.
User closes toggle switch to Right of LED light to finish CSV file. Open toggle switch and Reset Arduino to start a new file.
Best to test one turn radius at a time, so that we can measure outside.
You Must put micro SD card in larger card shell then into computer.
!!!!!!!!!! IMPORTANT: Disable power to SD card breakout board before removing the SD card, 
otherwise the file could be corrupted !!!!!!!!!!!!!!!!
*/
//--------------------------------------------------------

#include <SdFat.h>  //Not a standard library - must download from zip file available at:
//http://code.google.com/p/beta-lib/downloads/detail?name=SdFatBeta20130621.zip&can=2&q
#include <SdFatUtil.h>  // define FreeRam()

#define SD_CHIP_SELECT  SS  // SD chip select pin - may need to change to 10
#define USE_DS1307       0  // set nonzero to use DS1307 RTC
#define LOG_INTERVAL  1000  // mills between entries
#define SENSOR_COUNT     2  // number of analog pins to log -- optional now
#define ECHO_TO_SERIAL   1  // echo data to serial port if nonzero
#define WAIT_TO_START    1  // Wait for serial input in setup()
#define ADC_DELAY       10  // ADC delay for high impedence sensors

//Global integer to store chosen input
int analogPin = 0;
//int quit = 0;
int PullDownPin = 7;  // Press Sensor pin
int LEDPin = 8; //Red LED in digital pin 8 with resistor in series.

//Globals for analog reading:
int throttle = A1;
int outOne = DAC0;
int outTwo = DAC1;
int Res = 10;
int Speed = 0;
int maxThrottle = 670;

// file system object
SdFat sd;

// text file for logging
ofstream logfile;

// Serial print stream
ArduinoOutStream cout(Serial);

// buffer to format data - makes it eaiser to echo to Serial
char buf[80];
//------------------------------------------------------------------------------
#if SENSOR_COUNT > 6
#error SENSOR_COUNT too large
#endif  // SENSOR_COUNT
//------------------------------------------------------------------------------
// store error strings in flash to save RAM
#define error(s) sd.errorHalt_P(PSTR(s))
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
void setup() {
  Serial.begin(9600);
  pinMode(PullDownPin, INPUT);    // Pin 7 is connected to Press sensor
  digitalWrite(PullDownPin, HIGH); //Pin 7 is now high.  When pressed, pin & will be pulled LOW.
//Sense to see if PullDownPin is low before proceeding with code.
  pinMode(LEDPin, OUTPUT);
  digitalWrite(LEDPin, HIGH); //LED indicator 
while (!Serial){}  // wait for DUE
  
  // pstr stores strings in flash to save RAM
  cout << endl << pstr("FreeRam: ") << FreeRam() << endl;


#if WAIT_TO_START
 // cout << pstr("Type any character to start\n");
 // while (Serial.read() <= 0) {}
  delay(400);  // catch Due reset problem
#endif  // WAIT_TO_START


  // initialize the SD card at SPI_HALF_SPEED to avoid bus errors with
  if (!sd.begin(SD_CHIP_SELECT, SPI_HALF_SPEED)) sd.initErrorHalt();
  //********Need to reserach SPI_HALF_SPEED to see if this is causing unnecessary lag.********
  

  // create a new file in root, the current working directory
  char name[] = "Steering.CSV";

  for (uint8_t i = 0; i < 100; i++) {
    name[6] = i/10 + '0';
    name[7] = i%10 + '0';
    if (sd.exists(name)) continue;
    logfile.open(name);
    break;
  }

  if (!logfile.is_open()) error("file.open");

  cout << pstr("Logging to: ") << name << endl;
 // cout << pstr("Type any character to stop\n\n");
  
  // format header in buffer
  obufstream bout(buf, sizeof(buf));

  bout << pstr("millis");

  logfile << buf << endl;

#if ECHO_TO_SERIAL
  cout << buf << endl;
#endif  // ECHO_TO_SERIAL
}
//------------------------------------------------------------------------------
void loop() {

   uint32_t m;

  // wait for time to be a multiple of interval
  do {
    m = millis();
  } while (m % LOG_INTERVAL);

  // use buffer stream to format line
  obufstream bout(buf, sizeof(buf));

  // start with time in millis
  cout << ("\n");
  bout << m;

  //Hallie's test code
    
    //Asks user to choose which input is under test.  Serial data is alphanumeric and case sensitive.
   // cout << pstr("\nWhat are we testing?  \nFor Accelerator type 'A'. For Steering type 'S.' To quit type 'Q'\n");
   // while (Serial.available() <= 0) {}  //Enter Dakota's code here??
  //  char analogInput = Serial.read();
    analogPin = 0;
    delay(400);  // catch Due reset problem
  int j;
  // read analog pins and format data 
  for (uint8_t ia = 0; ia < 10; ia++) {
    j = analogRead(analogPin);
    
    delay(ADC_DELAY);  //Set ADC_DELAY to higher ammount of milliseconds for more time between samples.
    bout << ',' << j;
  }
  
  bout << endl;
  logfile << buf << flush;
  
  delay(100);
  
    // log data and flush to SD
  logfile << buf << flush;
  
       // check for error
  // if (!logfile) error("write data failed");  
   //Always indicates an error - needs troubleshooting as of 2/3/14...


#if ECHO_TO_SERIAL
  cout << buf;
#endif  // ECHO_TO_SERIAL

  // don't log two points in the same millis
  if (m == millis()) delay(1);
  
  if (digitalRead(PullDownPin) == HIGH) return;  //Gather more data.  Toggle switch is open.
  
  while (1);
  
  
if (digitalRead(PullDownPin) == LOW) { 
  //Toggle switch is closed. Finish writing to file and close.
      logfile.close();
      cout << pstr("Done!");
  }
  
} //End of void loop

void Throttle_2_DAC() {
  // reads the throttle input and outputs an analog voltage
  analogReadResolution(Res);
  int throttle_in = analogRead(throttle);
  Serial.print("Throttle input: "); //Debug Statements ~ visual data
  Serial.println(throttle_in);
  
  Speed = map(throttle_in, 0, maxThrottle, 0, 1024);
    
  analogWriteResolution(Res);
  analogWrite(outOne, Speed);
  analogWriteResolution(Res);
  analogWrite(outTwo, Speed);
  Serial.print("DAC Output: "); //Debug Statements ~ visual data
  Serial.println(Speed);

}
